#!/bin/bash
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ï–ñ–ï–î–ù–ï–í–ù–´–ô WORKFLOW –î–õ–Ø –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û ML –ü–†–û–ï–ö–¢–ê
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∞–ø–∞–º–∏: mlflow_server + model_improvement
# –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∫–æ–¥–∞ –¥–ª—è –î–º–∏—Ç—Ä–∏—è
# =================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —ç—Ç–∞–ø–æ–≤
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
source "$PROJECT_ROOT/project_safety_detector.sh"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${PURPLE}üõ°Ô∏è  $1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. –£–¢–†–ï–ù–ù–Ø–Ø –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–ë–û–ß–ï–ì–û –î–ù–Ø
morning_setup() {
    print_header "–£–¢–†–ï–ù–ù–Ø–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–†–û–ï–ö–¢–ê"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    echo
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
    cd "$PROJECT_ROOT"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å—Ç–∞—Ç—É—Å
    if git status --porcelain | grep -q .; then
        print_warning "–ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        git status --short
        echo
        read -p "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add -A
            git commit -m "[$stage] Morning cleanup - $(date '+%Y-%m-%d %H:%M')"
            print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        fi
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ç–∫—É –¥–ª—è –¥–Ω—è
    local branch_name="work/$(date +%Y-%m-%d)"
    if ! git show-ref --verify --quiet refs/heads/"$branch_name"; then
        git checkout -b "$branch_name"
        print_success "–°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –≤–µ—Ç–∫–∞: $branch_name"
    else
        git checkout "$branch_name"
        print_success "–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—á—É—é –≤–µ—Ç–∫—É: $branch_name"
    fi
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å remote
    if git remote | grep -q origin; then
        git fetch origin
        print_success "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É backup'–æ–≤ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
    setup_backup_structure "$stage"
    print_success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ backup'–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    
    print_success "–≠—Ç–∞–ø '$stage' –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! $(date '+%H:%M')"
    print_warning "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './safe_save.sh' –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
}

# 2. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô BACKUP –ö–ê–ñ–î–´–ô –ß–ê–°
hourly_backup() {
    print_header "–ï–ñ–ï–ß–ê–°–ù–´–ô BACKUP"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    local snapshot_path="$BACKUP_ROOT/daily_snapshots"
    local timestamp=$(date +%Y%m%d_%H%M)
    
    echo
    mkdir -p "$snapshot_path"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è backup'–∞
    local files_to_backup=($(get_files_to_protect "$stage"))
    local backup_count=0
    
    if [ ${#files_to_backup[@]} -eq 0 ]; then
        print_warning "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è backup'–∞ –≤ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ"
        return 1
    fi
    
    print_success "–°–æ–∑–¥–∞—é snapshot –¥–ª—è —ç—Ç–∞–ø–∞: $(get_stage_description $stage)"
    
    # –°–æ–∑–¥–∞–µ–º snapshot –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file in "${files_to_backup[@]}"; do
        if [ -f "$file" ]; then
            local filename=$(basename "$file")
            local extension="${filename##*.}"
            local basename="${filename%.*}"
            local snapshot_name="${stage}_${basename}_snapshot_${timestamp}.${extension}"
            
            cp "$file" "$snapshot_path/$snapshot_name"
            print_success "Snapshot: $file ‚Üí $snapshot_name"
            backup_count=$((backup_count + 1))
        fi
    done
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
    cd "$PROJECT_ROOT"
    
    # Git commit —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    git add -A
    if git commit -m "[$stage] Hourly backup - $timestamp"; then
        print_success "–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Git: $timestamp"
    else
        print_success "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup'–∞"
    fi
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    
    print_success "–§–∞–π–ª–æ–≤ –≤ backup'–µ: $backup_count | –í—Ä–µ–º—è: $(date '+%H:%M')"
}

# 3. –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ï–†–ï–î –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–ú–ò
safe_experiment() {
    print_header "–ü–û–î–ì–û–¢–û–í–ö–ê –ö –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–£"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    local experiment_name="$1"
    
    echo
    
    if [ -z "$experiment_name" ]; then
        read -p "–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: " experiment_name
    fi
    
    local experiment_path="$(get_backup_path $stage experiments)"
    mkdir -p "$experiment_path"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
    cd "$PROJECT_ROOT"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    git add -A
    git commit -m "[$stage] Before experiment: $experiment_name - $(date)"
    
    # –°–æ–∑–¥–∞–µ–º backup –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —ç—Ç–∞–ø–∞
    local files_to_backup=($(get_files_to_protect "$stage"))
    local timestamp=$(date +%Y%m%d_%H%M)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backup'–∞ —Ñ–∞–π–ª–æ–≤
    cd - > /dev/null
    
    for file in "${files_to_backup[@]}"; do
        if [ -f "$file" ]; then
            local filename=$(basename "$file")
            local extension="${filename##*.}"
            local basename="${filename%.*}"
            local backup_name="${basename}_before_${experiment_name// /_}_${timestamp}.${extension}"
            
            cp "$file" "$experiment_path/$backup_name"
            print_success "Backup: $file ‚Üí $backup_name"
        fi
    done
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏
    cd "$PROJECT_ROOT"
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    local branch_name="experiment/${stage}/${experiment_name// /_}"
    git checkout -b "$branch_name" 2>/dev/null || git checkout "$branch_name"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    
    print_success "–ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É: $experiment_name"
    print_success "–≠—Ç–∞–ø: $(get_stage_description $stage)"
    print_success "Backup'—ã: $experiment_path"
    print_success "–í–µ—Ç–∫–∞: $branch_name"
    
    echo
    print_warning "–î–õ–Ø –û–¢–ö–ê–¢–ê –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:"
    echo "cd $PROJECT_ROOT && git checkout work/$(date +%Y-%m-%d)"
    echo "git reset --hard HEAD~1"
}

# 4. –í–ï–ß–ï–†–ù–ï–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
evening_save() {
    print_header "–í–ï–ß–ï–†–ù–ï–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–†–û–ï–ö–¢–ê"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    local daily_backup_path="$(get_backup_path $stage manual)"
    
    echo
    mkdir -p "$daily_backup_path"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π backup –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —ç—Ç–∞–ø–∞
    local files_to_backup=($(get_files_to_protect "$stage"))
    local date_stamp=$(date +%Y%m%d)
    local timestamp=$(date +%Y%m%d_%H%M)
    
    print_success "–°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π backup –¥–ª—è: $(get_stage_description $stage)"
    
    for file in "${files_to_backup[@]}"; do
        if [ -f "$file" ]; then
            local filename=$(basename "$file")
            local extension="${filename##*.}"
            local basename="${filename%.*}"
            local backup_name="${basename}_daily_${timestamp}.${extension}"
            
            cp "$file" "$daily_backup_path/$backup_name"
            print_success "–§–∏–Ω–∞–ª—å–Ω—ã–π backup: $file ‚Üí $backup_name"
        fi
    done
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
    cd "$PROJECT_ROOT"
    
    # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    git add -A
    git commit -m "[$stage] End of day save - $(date '+%Y-%m-%d %H:%M')"
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –∏ –º–µ—Ä–∂–∏–º
    git checkout main
    git merge "work/$(date +%Y-%m-%d)" --no-ff -m "[$stage] Daily work merge - $(date '+%Y-%m-%d')"
    
    # –ü—É—à–∏–º –≤ remote (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if git remote | grep -q origin; then
        git push origin main
        print_success "–ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    fi
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
    local commits_today=$(git log --oneline --since="1 day ago" | wc -l)
    local backups_today=$(find "$BACKUP_ROOT" -name "*${date_stamp}*" -type f | wc -l)
    local project_size=$(du -sh "$PROJECT_ROOT" | cut -f1)
    
    print_success "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: $commits_today"
    print_success "Backup'–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: $backups_today"
    print_success "–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: $project_size"
    print_success "–≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω: $(get_stage_description $stage)"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    
    echo
    print_header "–î–ï–ù–¨ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û! üéâ"
    print_warning "–í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞—â–∏—â–µ–Ω—ã backup'–∞–º–∏"
}

# 5. –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
emergency_restore() {
    print_header "–≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    echo
    
    print_success "–î–æ—Å—Ç—É–ø–Ω—ã–µ backup'—ã –¥–ª—è —ç—Ç–∞–ø–∞: $(get_stage_description $stage)"
    echo
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backup'—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for backup_type in auto manual pre_commit experiments; do
        local backup_path="$(get_backup_path $stage $backup_type)"
        if [ -d "$backup_path" ] && [ "$(ls -A $backup_path 2>/dev/null)" ]; then
            echo "üìÅ $backup_type:"
            ls -lt "$backup_path" | head -5 | sed 's/^/   /'
            echo
        fi
    done
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º snapshots
    if [ -d "$BACKUP_ROOT/daily_snapshots" ]; then
        echo "üì∏ Daily snapshots:"
        ls -lt "$BACKUP_ROOT/daily_snapshots" | grep "$stage" | head -5 | sed 's/^/   /'
        echo
    fi
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ backup —Ñ–∞–π–ª—É: " backup_file
    
    if [ -f "$backup_file" ]; then
        local filename=$(basename "$backup_file")
        local target_file=""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ backup'–∞
        if [[ "$filename" == *"improve_baseline_model"* ]]; then
            target_file="improve_baseline_model.ipynb"
        elif [[ "$filename" == *"register_model_mlflow"* ]]; then
            target_file="register_model_mlflow.py"
        elif [[ "$filename" == *"improve_dataset"* ]]; then
            target_file="improve_dataset.py"
        else
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ:"
            get_files_to_protect "$stage"
            read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: " target_file
        fi
        
        if [ -n "$target_file" ]; then
            cp "$backup_file" "$target_file"
            print_success "–§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $target_file ‚Üê $filename"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
            cd "$PROJECT_ROOT"
            
            # –ö–æ–º–º–∏—Ç–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            git add "$target_file"
            git commit -m "[$stage] Emergency restore: $target_file from $filename"
            print_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ Git"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            cd - > /dev/null
        fi
    else
        print_error "Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
    fi
}

# 6. –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• BACKUP'–û–í
cleanup_old_backups() {
    print_header "–û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• BACKUP'–û–í"
    
    echo "üßπ –û—á–∏—â–∞—é backup'—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π..."
    local total_deleted=0
    
    # –û—á–∏—â–∞–µ–º backup'—ã –≤–æ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
    for stage_dir in "$BACKUP_ROOT"/{stage1,stage2-5,root}; do
        if [ -d "$stage_dir" ]; then
            local stage_name=$(basename "$stage_dir")
            echo "üìÅ –≠—Ç–∞–ø: $stage_name"
            
            # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø backup'–æ–≤
            for backup_type in auto manual pre_commit experiments; do
                local backup_path="$stage_dir/$backup_type"
                if [ -d "$backup_path" ]; then
                    local deleted=$(find "$backup_path" -type f -mtime +7 -delete -print 2>/dev/null | wc -l)
                    total_deleted=$((total_deleted + deleted))
                    if [ "$deleted" -gt 0 ]; then
                        print_success "  $backup_type: —É–¥–∞–ª–µ–Ω–æ $deleted —Ñ–∞–π–ª–æ–≤"
                    fi
                fi
            done
        fi
    done
    
    # –û—á–∏—â–∞–µ–º daily snapshots —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π
    if [ -d "$BACKUP_ROOT/daily_snapshots" ]; then
        local deleted_snapshots=$(find "$BACKUP_ROOT/daily_snapshots" -type f -mtime +2 -delete -print 2>/dev/null | wc -l)
        total_deleted=$((total_deleted + deleted_snapshots))
        if [ "$deleted_snapshots" -gt 0 ]; then
            print_success "Snapshots: —É–¥–∞–ª–µ–Ω–æ $deleted_snapshots —Ñ–∞–π–ª–æ–≤"
        fi
    fi
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    local remaining_total=$(find "$BACKUP_ROOT" -type f 2>/dev/null | wc -l)
    local backup_size=$(du -sh "$BACKUP_ROOT" 2>/dev/null | cut -f1)
    
    print_success "–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: $total_deleted —Ñ–∞–π–ª–æ–≤"
    print_success "–û—Å—Ç–∞–ª–æ—Å—å backup'–æ–≤: $remaining_total"
    print_success "–†–∞–∑–º–µ—Ä backup'–æ–≤: $backup_size"
}

# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
show_menu() {
    print_header "–°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ö–û–î–ê"
    echo "1) üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    echo "2) üíæ –ï–∂–µ—á–∞—Å–Ω—ã–π backup"
    echo "3) üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É"
    echo "4) üåô –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
    echo "5) üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "6) üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤"
    echo "7) üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "0) –í—ã—Ö–æ–¥"
    echo
}

# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê
show_stats() {
    print_header "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–†–û–ï–ö–¢–ê"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if ! project_safety_check; then
        print_error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return 1
    fi
    
    local stage="$PROJECT_STAGE"
    echo
    
    print_success "–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: $(get_stage_description $stage)"
    echo
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è Git —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cd "$PROJECT_ROOT"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    local total_commits=$(git log --oneline | wc -l)
    local project_size=$(du -sh . | cut -f1)
    local git_branches=$(git branch -a | wc -l)
    
    echo "üöÄ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:"
    echo "   üìù Git –∫–æ–º–º–∏—Ç–æ–≤: $total_commits"
    echo "   üìÇ –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: $project_size"
    echo "   üåø Git –≤–µ—Ç–æ–∫: $git_branches"
    echo
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup'–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º
    echo "üíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê BACKUP'–û–í:"
    for stage_name in stage1 stage2-5 root; do
        local stage_path="$BACKUP_ROOT/$stage_name"
        if [ -d "$stage_path" ]; then
            local stage_backups=$(find "$stage_path" -type f 2>/dev/null | wc -l)
            local stage_size=$(du -sh "$stage_path" 2>/dev/null | cut -f1)
            echo "   üìÅ $stage_name: $stage_backups —Ñ–∞–π–ª–æ–≤ ($stage_size)"
        fi
    done
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ daily snapshots
    if [ -d "$BACKUP_ROOT/daily_snapshots" ]; then
        local snapshots_count=$(find "$BACKUP_ROOT/daily_snapshots" -type f | wc -l)
        local snapshots_size=$(du -sh "$BACKUP_ROOT/daily_snapshots" | cut -f1)
        echo "   üì∏ Snapshots: $snapshots_count —Ñ–∞–π–ª–æ–≤ ($snapshots_size)"
    fi
    
    echo
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–£–©–ï–ì–û –≠–¢–ê–ü–ê ($stage):"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    
    local files_to_protect=($(get_files_to_protect "$stage"))
    echo "   üìã –§–∞–π–ª–æ–≤ –≤ —ç—Ç–∞–ø–µ: ${#files_to_protect[@]}"
    
    for file in "${files_to_protect[@]}"; do
        if [ -f "$file" ]; then
            local file_size=$(du -h "$file" | cut -f1)
            local last_modified=$(stat -c %y "$file" | cut -d' ' -f1,2 | cut -d'.' -f1)
            echo "   üìÑ $file: $file_size (–∏–∑–º–µ–Ω–µ–Ω: $last_modified)"
        fi
    done
    
    echo
    echo "üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: $(date '+%Y-%m-%d %H:%M:%S')"
}

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
main() {
    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice
        
        case $choice in
            1) morning_setup ;;
            2) hourly_backup ;;
            3) safe_experiment ;;
            4) evening_save ;;
            5) emergency_restore ;;
            6) cleanup_old_backups ;;
            7) show_stats ;;
            0) 
                print_success "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ö–æ–¥ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üõ°Ô∏è"
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: $choice"
                ;;
        esac
        
        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        clear
    done
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    clear
    main "$@"
fi
